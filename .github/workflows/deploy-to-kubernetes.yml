name: Deploy to AWS EKS

on:
  push:
    branches:
      - master  # Change to your deployment branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      AWS_ACCOUNT_ID: 055665308353
      ORDER_SERVICE_REPO: order-service
      USER_SERVICE_REPO: user-service
      EKS_CLUSTER: fabulous-metal-seal
      DEPLOYMENT_NAME_ORDER: order-service-deployment
      DEPLOYMENT_NAME_USER: user-service-deployment
      # ECR_REPO: 055665308353.dkr.ecr.us-west-2.amazonaws.com/k8-temp
      # SECRETS_NAME: my-app-secrets # If using Secrets Manager

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3️⃣ Authenticate to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 055665308353.dkr.ecr.$AWS_REGION.amazonaws.com

      # 4️⃣ Build the Java Application (IMPORTANT)
      - name: Build OrderService JAR
        run: |
          cd OrderService
          mvn clean package -DskipTests

      - name: Build UserService JAR
        run: |
          cd UserService
          mvn clean package -DskipTests

      # 5️⃣ Build and Push Docker Images
      - name: Build and Push OrderService Image
        run: |
          cd OrderService
          docker build -t $ORDER_SERVICE_REPO .
          docker tag $ORDER_SERVICE_REPO:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ORDER_SERVICE_REPO:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ORDER_SERVICE_REPO:latest

      - name: Build and Push UserService Image
        run: |
          cd UserService
          docker build -t $USER_SERVICE_REPO .
          docker tag $USER_SERVICE_REPO:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$USER_SERVICE_REPO:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$USER_SERVICE_REPO:latest

      # 6️⃣ Deploy to Kubernetes in EKS
      - name: Deploy OrderService to Amazon EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION
          kubectl set image deployment/$DEPLOYMENT_NAME_ORDER $DEPLOYMENT_NAME_ORDER=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ORDER_SERVICE_REPO:latest
          kubectl rollout status deployment/$DEPLOYMENT_NAME_ORDER

      - name: Deploy UserService to Amazon EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION
          kubectl set image deployment/$DEPLOYMENT_NAME_USER $DEPLOYMENT_NAME_USER=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$USER_SERVICE_REPO:latest
          kubectl rollout status deployment/$DEPLOYMENT_NAME_USER

      # 6️⃣ Sync with ArgoCD (If using ArgoCD)
      # - name: Sync ArgoCD Application
      #   run: |
      #     argocd app sync my-app

      # # 7️⃣ Fetch & Apply Secrets (If using AWS Secrets Manager)
      # - name: Fetch Secrets from AWS Secrets Manager
      #   run: |
      #     SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id $SECRETS_NAME --query SecretString --output text)
      #     echo "SECRET_VALUE=$SECRET_VALUE" >> $GITHUB_ENV





# name: Build and Deploy to Kubernetes

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Check out the repository
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     # Step 2: Set up JDK
#     - name: Set up Java
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'temurin'

#     # Step 3: Build OrderService JAR
#     - name: Build OrderService
#       working-directory: ./OrderService
#       run: mvn clean package -DskipTests

#     # Step 4: Build UserService JAR
#     - name: Build UserService
#       working-directory: ./UserService
#       run: mvn clean package -DskipTests

#     # Step 5: Log in to Docker Hub
#     - name: Log in to Docker Hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     # Step 6: Build and push Docker images
#     - name: Build and push OrderService image
#       working-directory: ./OrderService
#       run: |
#         docker build -t ${{ secrets.DOCKER_USERNAME }}/orderservice:latest .
#         docker push ${{ secrets.DOCKER_USERNAME }}/orderservice:latest

#     - name: Build and push UserService image
#       working-directory: ./UserService
#       run: |
#         docker build -t ${{ secrets.DOCKER_USERNAME }}/userservice:latest .
#         docker push ${{ secrets.DOCKER_USERNAME }}/userservice:latest

#     # Step 7: Set up kubectl
#     - name: Set up kubeconfig
#       run: |
#         echo "${{ secrets.MINIKUBE_KUBECONFIG }}" | base64 -d > kubeconfig
#         export KUBECONFIG=kubeconfig
#         kubectl cluster-info


#     # Step 8: Deploy to Kubernetes
#     - name: Deploy OrderService
#       run: kubectl apply -f kubernetes-manifests/orderservice-deployment.yaml

#     - name: Deploy UserService
#       run: kubectl apply -f kubernetes-manifests/userservice-deployment.yaml

        
